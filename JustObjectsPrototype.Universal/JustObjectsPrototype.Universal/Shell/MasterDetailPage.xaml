<Page
	x:Class="JustObjectsPrototype.Universal.Shell.MasterDetailPage"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="using:JustObjectsPrototype.Universal.Shell"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	NavigationCacheMode="Enabled"
	Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
	<Page.Transitions>
		<TransitionCollection>
			<NavigationThemeTransition />
		</TransitionCollection>
	</Page.Transitions>


	<Page.Resources>
		<DataTemplate x:Key="MasterListViewItemTemplate" x:DataType="local:ItemViewModel">
			<Grid Margin="0,11,0,13">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="Auto" />
				</Grid.RowDefinitions>

				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>

				<TextBlock 
					Text="{x:Bind Title,Mode=OneWay}" 
					Style="{ThemeResource BaseTextBlockStyle}" />

				<TextBlock 
					Text="{x:Bind Text,Mode=OneWay}"
					MaxLines="1" 
					Grid.Row="1" 
					Style="{ThemeResource ListBodyTextBlockStyle}" />

				<TextBlock
					Text="{x:Bind DateCreatedHourMinute}"
					Grid.Column="1"
					Margin="12,1,0,0"
					Style="{ThemeResource ListCaptionAltTextblockStyle}" />
			</Grid>
		</DataTemplate>
		<Style x:Key="SplitViewTogglePaneButtonStyle" TargetType="ToggleButton">
			<Setter Property="FontSize" Value="20" />
			<Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
			<Setter Property="MinHeight" Value="48" />
			<Setter Property="MinWidth" Value="48" />
			<Setter Property="Margin" Value="0" />
			<Setter Property="Padding" Value="0" />
			<Setter Property="HorizontalAlignment" Value="Left" />
			<Setter Property="VerticalAlignment" Value="Top" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="VerticalContentAlignment" Value="Center" />
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="Foreground" Value="{ThemeResource SystemControlForegroundBaseHighBrush}" />
			<Setter Property="Content" Value="&#xE700;" />
			<Setter Property="AutomationProperties.Name" Value="Menu" />
			<Setter Property="UseSystemFocusVisuals" Value="True"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ToggleButton">
						<Grid Background="{TemplateBinding Background}" x:Name="LayoutRoot">
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal" />
									<VisualState x:Name="PointerOver">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="(Grid.Background)">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightListLowBrush}"/>
											</ObjectAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="(Grid.Background)">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightListMediumBrush}"/>
											</ObjectAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Disabled">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="(TextBlock.Foreground)">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlDisabledBaseLowBrush}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Checked"/>
									<VisualState x:Name="CheckedPointerOver">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="(Grid.Background)">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightListLowBrush}"/>
											</ObjectAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="CheckedPressed">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="(Grid.Background)">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightListMediumBrush}"/>
											</ObjectAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="CheckedDisabled">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="(TextBlock.Foreground)">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlDisabledBaseLowBrush}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<ContentPresenter x:Name="ContentPresenter"
										  Content="{TemplateBinding Content}"
										  Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  AutomationProperties.AccessibilityView="Raw" />
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="NavMenuItemContainerStyle" TargetType="ListViewItem">
			<Setter Property="MinWidth" Value="{StaticResource SplitViewCompactPaneThemeLength}"/>
			<Setter Property="Height" Value="48"/>
			<Setter Property="Padding" Value="0"/>
		</Style>
		<DataTemplate x:Key="NavMenuItemTemplate" x:DataType="local:MenuItemViewModel">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="48" />
					<ColumnDefinition />
				</Grid.ColumnDefinitions>
				<!-- Showing a ToolTip and the Label is redundant.  We put the ToolTip on the icon.
					 It appears when the user hovers over the icon, but not the label which provides
					 value when the SplitView is 'Compact' while reducing the likelihood of showing
					 redundant information when the label is shown.-->
				<FontIcon x:Name="Glyph" FontSize="16" Glyph="{x:Bind SymbolAsChar}" VerticalAlignment="Center" HorizontalAlignment="Center" ToolTipService.ToolTip="{x:Bind Label}"/>
				<TextBlock x:Name="Text" Grid.Column="1" Text="{x:Bind Label}" />
			</Grid>
		</DataTemplate>
		<Style x:Key="NavigationSettingsButtonStyle" TargetType="Button" BasedOn="{StaticResource NavigationBackButtonNormalStyle}">
			<Setter Property="HorizontalAlignment" Value="Stretch"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="Height" Value="48"/>
			<Setter Property="Width" Value="NaN"/>
			<Setter Property="MinWidth" Value="48"/>
			<Setter Property="AutomationProperties.Name" Value="Settings"/>
			<Setter Property="Content">
				<Setter.Value>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="48" />
							<ColumnDefinition />
						</Grid.ColumnDefinitions>
						<FontIcon Grid.Column="0" FontSize="16" Glyph="&#xE713;" VerticalAlignment="Center" HorizontalAlignment="Center"/>
						<TextBlock Grid.Column="1" Style="{ThemeResource BodyTextBlockStyle}" Text="Settings" VerticalAlignment="Center" />
					</Grid>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="NavigationBackButtonStyle" TargetType="Button" BasedOn="{StaticResource NavigationBackButtonNormalStyle}">
			<Setter Property="HorizontalAlignment" Value="Stretch"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="Height" Value="48"/>
			<Setter Property="Width" Value="NaN"/>
			<Setter Property="MinWidth" Value="48"/>
			<Setter Property="AutomationProperties.Name" Value="Back"/>
			<Setter Property="Content">
				<Setter.Value>
					<Grid x:Name="RootGrid">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="48" />
							<ColumnDefinition />
						</Grid.ColumnDefinitions>
						<FontIcon x:Name="Glyph" Grid.Column="0" FontSize="16" Glyph="&#xE0D5;" MirroredWhenRightToLeft="True" VerticalAlignment="Center" HorizontalAlignment="Center"/>
						<TextBlock x:Name="Text" Grid.Column="1" Style="{ThemeResource BodyTextBlockStyle}" Text="Back" VerticalAlignment="Center" />
					</Grid>
				</Setter.Value>
			</Setter>
		</Style>
		<local:NullIsVisible x:Key="nullIsVisible"/>
	</Page.Resources>


	<Grid x:Name="LayoutRoot">
		<VisualStateManager.VisualStateGroups>
			<VisualStateGroup x:Name="AdaptiveStates" CurrentStateChanged="AdaptiveStates_CurrentStateChanged">
				<VisualState x:Name="DefaultState">
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="720" />
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<Setter Target="RootSplitView.DisplayMode" Value="CompactOverlay"/>
						<Setter Target="RootSplitView.IsPaneOpen" Value="False"/>
					</VisualState.Setters>
				</VisualState>

				<VisualState x:Name="NarrowState">
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="0" />
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<Setter Target="MasterColumn.Width" Value="*" />
						<Setter Target="DetailColumn.Width" Value="0" />
						<Setter Target="RootSplitView.DisplayMode" Value="Overlay"/>
					</VisualState.Setters>
				</VisualState>
			</VisualStateGroup>
		</VisualStateManager.VisualStateGroups>

		<SplitView 
			x:Name="RootSplitView"
			Grid.Column="0"
			DisplayMode="Inline"
			OpenPaneLength="256"
			IsTabStop="False">
			<SplitView.Pane>
				<local:NavMenuListView 
					TabIndex="3"
					Margin="0,48,0,0"
					ItemContainerStyle="{StaticResource NavMenuItemContainerStyle}"
					ItemInvoked="NavMenuList_ItemInvoked"
					ItemsSource="{Binding MenuItems}"
					SelectedItem="{Binding SelectedMenuItem,Mode=TwoWay}"
					ItemTemplate="{StaticResource NavMenuItemTemplate}">
				</local:NavMenuListView>
			</SplitView.Pane>


			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>

				<Grid.ColumnDefinitions>
					<ColumnDefinition x:Name="MasterColumn" Width="500" />
					<ColumnDefinition x:Name="DetailColumn" Width="*" />
				</Grid.ColumnDefinitions>

				<TextBlock
					x:Name="titleBar"
					Text="{Binding SelectedMenuItem.Label}"
					MinHeight="48"
					Style="{ThemeResource TitleTextBlockStyle}" />


				<ListView
					x:Name="MasterListView"
					Grid.Column="0"
					Grid.Row="1"
					ItemContainerTransitions="{x:Null}"
					IsItemClickEnabled="True"
					ItemTemplate="{StaticResource MasterListViewItemTemplate}"
					ItemsSource="{Binding MasterItems}"
					SelectedItem="{Binding SelectedMasterItem,Mode=TwoWay}"
					ItemClick="MasterListView_ItemClick">
					<ListView.ItemContainerStyle>
						<Style TargetType="ListViewItem">
							<Setter Property="HorizontalContentAlignment" Value="Stretch" />
						</Style>
					</ListView.ItemContainerStyle>
				</ListView>


				<StackPanel
					Grid.Column="1"
					Grid.RowSpan="2"
					BorderThickness="1,0,0,0"
					Padding="24,0"
					BorderBrush="{ThemeResource SystemControlForegroundBaseLowBrush}">

					<local:DetailView DataContext="{Binding SelectedMasterItem}"/>

				</StackPanel>


				<StackPanel Grid.Row="1" Orientation="Vertical" VerticalAlignment="Top" HorizontalAlignment="Left" Visibility="{Binding SelectedMenuItem,Converter={StaticResource nullIsVisible}}">
					<Image Source="../Assets/left.png" Stretch="None" VerticalAlignment="Top" HorizontalAlignment="Left"/>
					<TextBlock FontSize="15" FontFamily="Consolas" VerticalAlignment="Center" Margin="50,10,0,4">
						Show.Prototype(With.These(objects));
					</TextBlock>
					<TextBlock FontSize="14" VerticalAlignment="Center" Margin="50,0,0,0">
						and see all the types on the left side.<LineBreak/>
						Select one type to see and edit all its instances.
					</TextBlock>
				</StackPanel>
				<StackPanel Grid.Row="1" Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Center" Visibility="{Binding SelectedMenuItem,Converter={StaticResource nullIsVisible}}">
					<TextBlock FontSize="14" VerticalAlignment="Center" Margin="0,0,0,40">
						Invoke methods of the selected type.
					</TextBlock>
					<Image Source="../Assets/down.png" Stretch="None"/>
				</StackPanel>
				<StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center" Visibility="{Binding SelectedMenuItem,Converter={StaticResource nullIsVisible}}">
					<TextBlock FontSize="14" VerticalAlignment="Center" Margin="0,40,0,0">
						Invoke methods of the selected instance.
					</TextBlock>
					<Image Source="../Assets/up.png" Stretch="None"/>
				</StackPanel>


			</Grid>

		</SplitView>

		<!-- Declared last to have it rendered above everything else, but it needs to be the first item in the tab sequence. -->
		<ToggleButton x:Name="TogglePaneButton"
					  TabIndex="1"
					  Style="{StaticResource SplitViewTogglePaneButtonStyle}"
					  IsChecked="{Binding IsPaneOpen, ElementName=RootSplitView, Mode=TwoWay}"
					  />


	</Grid>

	<Page.BottomAppBar>
		<CommandBar local:CommandBarBridge.MasterCommandsProperty="{x:Bind DataContext}">
			<CommandBar.Content>
				<TextBlock Text="{Binding SelectedMenuItem.Label}" Margin="12,14"/>
			</CommandBar.Content>
		</CommandBar>
	</Page.BottomAppBar>
</Page>
	